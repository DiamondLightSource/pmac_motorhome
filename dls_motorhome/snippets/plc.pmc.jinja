CLOSE

;####################################################
; Autogenerated Homing PLC for GeoBrick, DO NOT MODIFY
{% for group in plc.groups -%}
; Group {{ group.group_num }}:
{{ group.comments }}
{% endfor -%}
;####################################################

; Use a different timer for each PLC
#define timer             i(5111+({{plc.plc_num}}&30)*50+{{plc.plc_num}}%2)
; Make timer more readable
#define MilliSeconds      * 8388608/i10

; Homing State P Variable
#define HomingState       P1100
#define StateIdle         0
#define StateConfiguring  1
#define StateMoveNeg      2
#define StateMovePos      3
#define StateHoming       4
#define StatePostHomeMove 5
#define StateAligning     6
#define StateDone         7
#define StateFastSearch   8
#define StateFastRetrace  9
#define StatePreHomeMove  10
HomingState = StateIdle

; Homing Status P Variable
#define HomingStatus      P1101
#define StatusDone        0
#define StatusHoming      1
#define StatusAborted     2
#define StatusTimeout     3
#define StatusFFErr       4
#define StatusLimit       5
#define StatusIncomplete  6
#define StatusInvalid     7
#define StatusPaused      8
#define StatusDebugHoming 9
HomingStatus = StatusDone

; Homing Group P Variable
#define HomingGroup       P1102
HomingGroup = 0

; Homing Group Backup P Variable
#define HomingBackupGroup P1103
HomingBackupGroup = 0

OPEN PLC{{ plc.plc_num }} CLEAR

if (HomingStatus != StatusHoming)
and (HomingStatus != StatusDebugHoming)
    HomingStatus = StatusHoming
endif

;---- Configuring State ----
HomingState=StateConfiguring
;Save the Homing group to px03
HomingBackupGroup=HomingGroup
;Save high soft limits to P variables px04..x19
{{ plc.save_hi_limits() }}
;Save the low soft limits to P variables px20..x35
{{ plc.save_lo_limits() }}
;Save the home capture flags to P variables px36..x51
{{ plc.save_homed() }}
;Store 'not flag' to use in moving off a flag in P variables px52..x67
{{ plc.save_not_homed() }}
;Save the limit flags to P variables px68..x83
{{ plc.save_limit_flags() }}
;Save the current position to P variables px84..x99
{{ plc.save_position() }}
;Clear the soft limits
{{ plc.clear_limits() -}}

{# group loop #}
{%- for group in plc.groups %}

if (HomingBackupGroup = 1 or HomingBackupGroup = {{ group.group_num }})
and (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
    HomingGroup={{ group.group_num }}

    ;Clear home flags
    {{ group.clear_home() -}}
    {% for template in group.templates %}
        {# insert a snippet #}
        {%- include template+'.pmc.jinja' %}
    {% endfor -%}

    {# finalize group #}
    ;---- Check if all motors have homed ----
    if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
    and ({{ group.homed() }}=0)
        HomingStatus=StatusIncomplete
    endif

endif
{%- endfor %}

;---- Done ----
if (HomingStatus = StatusHoming or HomingStatus = StatusDebugHoming)
    ;If we've got this far without failing, set status and state done
    HomingStatus=StatusDone
    HomingState=StateDone
    ;Restore the homing group from px03
    HomingGroup=HomingBackupGroup
endif

;---- Tidy Up ----
;Stop all motors if they don't have a following error
{{ plc.stop_motors() }}
;Restore the high soft limits from P variables px04..x19
{{ plc.restore_hi_limits() }}
;Restore the low soft limits from P variables px20..x35
{{ plc.restore_lo_limits() }}
;Restore the home capture flags from P variables px36..x51
{{ plc.restore_homed() }}
;Restore the limit flags to P variables px68..x83
{{ plc.restore_limit_flags() }}

DISABLE PLC{{ plc.plc_num }}
CLOSE

