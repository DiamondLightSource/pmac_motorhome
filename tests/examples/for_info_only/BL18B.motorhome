#!/bin/env dls-python

# Import the motorhome PLC generation library
from motorhome import *

# find the plc number, component name and filename
num, name, filename = parse_args()

# set some defaults
plc = PLC(num, post = "i", ctype=BRICK)

# -------PMAC 1---------
if name == "S1":
    # Home off reference marks and return to initial position
    plc = PLC(num,htype=HSW,post="i",jdist=-400, ctype=1)
    for axis in [1,2]: # group 2 is X1, X2
        plc.add_motor(axis, group=2)
    for axis in [3,4]: # group 3 is Y1, Y2
        plc.add_motor(axis, group=3)
    plc.write(filename)

elif name == "A1":
    # Home on home switch at top of travel (just under positive limit).
    plc = PLC(num, htype=HOME, post=None, ctype=1)
    plc.add_motor(8, group=2)
    plc.write(filename)
    
elif name == "M1":
    # For the jacks, home off reference marks and return to initial position (there is also a home offset set in PMAC).
    plc = PLC(num,htype=HSW,post="i",jdist=-1000, ctype=1)
    for axis in [6,7]: # group 2 is Jacks
        plc.add_motor(axis, group=2)
    # group 3 is Bend (home on neg limit, and there is a nominal position in home offset on PMAC)
    plc.add_motor(5, group=3, htype=LIMIT)
    plc.write(filename)

# -------PMAC 2---------
elif name == "S2":
    # Home off reference marks and return to initial position
    plc = PLC(num,htype=HSW_HLIM,post="i",jdist=400, ctype=1)
    for axis in [1,2]: # group 2 is X1, X2
        plc.add_motor(axis, group=2)
    for axis in [3,4]: # group 3 is Y1, Y2
        plc.add_motor(axis, group=3)
    plc.write(filename)

elif name == "S3":
    # Home off reference marks and return to initial position
    plc = PLC(num,htype=HSW,post="i",jdist=-400, ctype=1)
    for axis in [5,6]: # group 2 is X1, X2
        plc.add_motor(axis, group=2)
    for axis in [7,8]: # group 3 is Y1, Y2
        plc.add_motor(axis, group=3)
    plc.write(filename)

# -------PMAC 3---------
elif name == "A2":
    # Home on home switch at top of travel (just under positive limit).
    plc = PLC(num, htype=HOME, post=None, ctype=1)
    plc.add_motor(1, group=2)
    plc.write(filename)

elif name == "M2":
    # For the jacks, home off reference marks and return to initial position (there is also a home offset set in PMAC).
    plc = PLC(num,htype=HSW,post="i",jdist=-1000, ctype=1)
    # group 2 is Bend (home on neg limit. No nominal position).
    plc.add_motor(2, group=2, htype=LIMIT)
    for axis in [3,4]: # group 3 is Jacks
        plc.add_motor(axis, group=3, htype=HSW,post="i",jdist=-1000)
    # group 4 is Yaw (drive to pos limit, home on referance mark. No nominal position).
    plc.add_motor(5, group=4, htype=HSW, jdist=1000)
    plc.write(filename)

# -------PMAC 4---------
elif name == "HR":
    # Home on ref mark after driving to neg limit.
    plc = PLC(num, htype=HSW,post="i",jdist=-10000, ctype=1)
    for axis in [1,2]: # group 2 is Jacks
        plc.add_motor(axis, group=2, htype=HSW,post="i",jdist=-10000)
    plc.write(filename)

elif name == "S4":
    # Go to pos limit, then home off reference marks and return to initial position
    plc = PLC(num,htype=HSW_HLIM,post="i",jdist=1000, ctype=1)
    for axis in [3,4]: # group 2 is X1, X2
        plc.add_motor(axis, group=2)
    for axis in [5,6]: # group 3 is Y1, Y2
        plc.add_motor(axis, group=3)
    plc.write(filename)

elif name == "A3":
    # Home on home switch at top of travel (just under positive limit). 
    plc = PLC(num, htype=HOME, post=None, ctype=1)
    plc.add_motor(7, group=2)
    plc.write(filename)

# -------PMAC 5---------
elif name == "IZERO":
    # Home on home switch at top of travel (just under positive limit). Return to initial position.
    plc = PLC(num, htype=HSW_HLIM, post="i", ctype=1)
    plc.add_motor(1, group=2)
    plc.write(filename)

elif name == "SAM1":
    plc = PLC(num, htype=HOME, post="i", ctype=1)
    plc.add_motor(2, group=2, htype=LIMIT,post="i",jdist=-1000) #Group 2 is Y
    plc.add_motor(3, group=3, htype=LIMIT,post="i",jdist=-1000) #Group 3 is Rot
    plc.write(filename)

elif name == "TAB1":
    plc = PLC(num, post="i", ctype=1)
    for axis in [4,5,6]: # group 2 is Y1, Y2, Y3
        plc.add_motor(axis, group=2, htype=LIMIT,post="i",jdist=1000)
    for axis in [7,8]: # group 3 is X1, X2
        plc.add_motor(axis, group=3, htype=HSW_HLIM,post="i",jdist=1000)
    plc.write(filename)

# -------PMAC 6---------
elif name == "SAM2":
    plc = PLC(num, htype=RLIM, post=None, ctype=GEOBRICK)
    for axis in [1, 2, 3]:
        plc.add_motor(axis, group=2)
    plc.write(filename)

elif name == "SAM3":
    plc = PLC(num, htype=HOME, post=None, ctype=1)
    plc.add_motor(4, group=2)
    plc.write(filename)

# -------PMAC 7---------
elif name == "USER1":
    plc = PLC(num, htype=RLIM, post=None, ctype=GEOBRICK)
    for axis in [2, 4, 5, 6, 7, 8]:
        plc.add_motor(axis, group=2)
    plc.write(filename)

# -------PMAC 8 DCM brick 1---------
elif name == "DCMX":
    # Home off negative limit and return to initial position
    plc = PLC(num,htype=LIMIT,post="i",jdist=-1000, ctype=1)
    plc.add_motor(1, group=1)
    plc.write(filename)

# ------PMAC 9 DCM brick 2 --------
elif name == "DCM2":
    plc = PLC(num, post="i", ctype=GEOBRICK)
    ## Need some checks to make sure the Y slide is in position before
    ## homing the Bragg axis and vice versa
    pre_home = """
#DEFINE PLC %d
#DEFINE AXIS_NO P(100*PLC_NO +1)
#DEFINE Y_AXIS 1
#DEFINE JOG_AXIS_NEG &COMMAND"J-"
#DEFINE TIMER I(5111+(10&30)*50+10%%2)
#DEFINE MILLISECONDS * 8388608/i10
#DEFINE TIMEOUT_TIME 500000
#DEFINE NEG_LIMIT M(100*AXIS_NO +22)
#DEFINE KILL_AXIS &COMMAND"K"
#DEFINE HOME_ON	P2130

P2132=I51
cmd "i51=0"
    
;***************************************************
;Move Y axis to a position where Bragg can be homed
;without a clash.
;***************************************************
AXIS_NO = Y_AXIS

ADDRESS#AXIS_NO
JOG_AXIS_NEG

TIMER = TIMEOUT_TIME MILLISECONDS
WHILE (NEG_LIMIT = 0) AND (TIMER > 0)
ENDWHILE

IF (NEG_LIMIT = 0)
	HOME_ON = -1
	ADDRESS#AXIS_NO
	KILL_AXIS
	DISABLE PLC PLC_NO
ENDIF
""" % num
    # Bragg axis
    #plc.add_motor(1, htype=NOTHING, group=2, post="L") # hardware low limit
    plc.add_motor(2, htype=HSW, group=2, post=20000000,
                  enc_axes=[5, 14, 7, 8])
    plc.add_motor(1, htype=LIMIT, group=2, post="z-1162855") # Y slide
    plc.configure_group(2, pre=pre_home, post="I51=P2132")
    # Pitch
    plc.add_motor(3, htype=LIMIT, group=3)
    # Roll
    plc.add_motor(4, htype=LIMIT, group=3)
    # Store the lookup table before and restore after homing
    plc.configure_group(3, pre='P2132=i51\n\t\tcmd "i51=0"',
                        post='i51=P2132')
    plc.write(filename)

else:
    sys.stderr.write("***Error: Can't make homing PLC %d for %s\n" % (num, name))
    sys.exit(1)

