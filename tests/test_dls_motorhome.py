from filecmp import cmp
from pathlib import Path

# import pytest

# from dls_motorhome._snippets import P_VARIABLE_API
# from dls_motorhome.group import Group

# def test_Group_class_is_context_manager():
#     assert hasattr(Group(), "__enter__")
#     assert hasattr(Group(), "__exit__")


# def test_Group_class_has_axes_attr():
#     assert hasattr(Group(), "axes")


# def test_plc_number_set_to_default_if_not_specified():
#     assert Group().plc_number == 9


# def test_plc_number_set_to_argument_parameter():
#     assert Group(plc_number=10).plc_number == 10


# def test_plc_number_must_be_within_range():
#     plc_number_min = 8
#     plc_number_max = 32
#     with pytest.raises(ValueError):
#         Group(plc_number=plc_number_max + 1)
#         Group(plc_number=plc_number_min - 1)
#         Group(plc_number=10.0)


# def test_Group_object_has_Pvar_api_in_string_list():
#     g = Group()
#     assert P_VARIABLE_API in g.code()


# def test_code_starts_with_CLOSE():
#     g = Group()
#     assert "CLOSE" in g.code().split("\n")[0]


# def test_timer_code_snippet_has_plc_number():
#     g = Group(plc_number=12)
#     lines = [line for line in g.code().split("\n") if "#define timer" in line]
#     assert "i(5111+(12&30)*50+12%2)" in lines[0]


# def test_code_has_Milliseconds_defined():
#     g = Group()
#     lines = [line for line in g.code().split("\n") if "#define MilliSeconds" in line]
#     print(lines)
#     assert "* 8388608/i10" in lines[0]


def test_BL07I_STEP_04_plc11():
    from dls_motorhome.commands import (
        motor,
        group,
        plc,
        comment,
        Controller,
        home_rlim,
    )

    file = "BL07I-MO-STEP-04.plc11"
    tmp_file = Path("/tmp") / file
    with plc(plc_num=11, controller=Controller.brick, filepath=tmp_file):
        motor(axis=1)
        motor(axis=2)
        motor(axis=4)
        motor(axis=5)

        with group(group_num=2, axes=[1, 2]):
            comment("RLIM", "None")
            home_rlim()

        with group(group_num=3, axes=[4, 5]):
            comment("RLIM", "None")
            home_rlim()

        this_path = Path(__file__).parent

    example = this_path / "examples" / file
    assert cmp(tmp_file, example), f"files {tmp_file} and {example} do not match"


# TODO add tests (and code) exactly like test_bl07i_step06_plc11 which reproduce
# existing examples generated by the original motorhome.py.
#
#
# Pick examples which exercise modes
# "HOME",
# "LIMIT",
# "HSW",
# "HSW_HLIM",
# "HSW_DIR",
# "RLIM",           done
# "NOTHING",
# "HSW_HSTOP"
# also exercise each of the post home move modes
#
# NOTE existing examples will require 'Convert Indentation to Spaces' VSCode cmd
# NOTE when tests fail you can easily see what has gone wrong with a command like:
#   code --diff tests/examples/BL18B-MO-STEP-01.plc13 /tmp/BL18B-MO-STEP-01.plc13


def test_BL18B_STEP01_plc13():
    from dls_motorhome.commands import (
        motor,
        group,
        plc,
        comment,
        Controller,
        PostHomeMove,
        home_hsw,
    )

    file = "BL18B-MO-STEP-01.plc13"
    tmp_file = Path("/tmp") / file
    with plc(plc_num=13, controller=Controller.brick, filepath=tmp_file):
        motor(axis=1, jdist=-400)
        motor(axis=2, jdist=-400)
        motor(axis=3, jdist=-400)
        motor(axis=4, jdist=-400)

        initial = PostHomeMove.initial_position

        with group(group_num=2, axes=[1, 2], post_home=initial):
            comment(htype="HSW", post="i")
            home_hsw()

        with group(group_num=3, axes=[3, 4], post_home=initial):
            comment(htype="HSW", post="i")
            home_hsw()

    this_path = Path(__file__).parent
    example = this_path / "examples" / file
    assert cmp(tmp_file, example), f"files {tmp_file} and {example} do not match"


def test_BL18B_STEP01_plc13_slits():
    from dls_motorhome.commands import plc, Controller, home_slits_hsw, PostHomeMove

    # generate a similar plc as test_BL18B_STEP01_plc13 but use the shortcut
    # home_slits() command
    # this separates the two pairs of slits so that they will not clash
    # the resulting PLC looks exactly like BL18B-MO-STEP-01.plc13 except that
    # it has an additional drive_neg_to_limit for all axes at the start
    # and it has only one group instead of two
    file = "BL18B-MO-STEP-01_slits.plc13"
    tmp_file = Path("/tmp") / file
    with plc(plc_num=13, controller=Controller.brick, filepath=tmp_file):
        home_slits_hsw(
            group_num=2,
            posx=1,
            negx=2,
            posy=3,
            negy=4,
            jdist=-400,
            post=PostHomeMove.initial_position,
        )

    this_path = Path(__file__).parent
    example = this_path / "examples" / file
    assert cmp(tmp_file, example), f"files {tmp_file} and {example} do not match"


def test_any_code():
    from dls_motorhome.commands import plc, Controller, group, command, motor

    # test the 'command' command which inserts arbitrary code
    file = "any_code.plc"
    tmp_file = Path("/tmp") / file
    with plc(plc_num=13, controller=Controller.brick, filepath=tmp_file):
        motor(axis=1)
        motor(axis=2)
        with group(group_num=2, axes=[1, 2]):
            command('Any old string will do for this test')
            command('multiple commands get a line each')

    this_path = Path(__file__).parent
    example = this_path / "examples" / file
    assert cmp(tmp_file, example), f"files {tmp_file} and {example} do not match"
